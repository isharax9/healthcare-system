package com.globemed.reports;

import com.globemed.appointment.Appointment;
import com.globemed.billing.MedicalBill;
import com.globemed.patient.PatientRecord;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.*;

/**
 * Aged Receivables Visitor - Fixed to match actual database schema
 * Analyzes accounts receivable aging and collection performance over time
 */
public class AgedReceivablesVisitor implements ReportVisitor {
    private final StringBuilder reportContent = new StringBuilder();
    private final Map<String, PatientReceivable> patientReceivables = new HashMap<>();
    private final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    // Aging buckets: 0-30, 31-60, 61-90, 91-120, 120+ days
    private final double[] agingBuckets = new double[5];
    private final int[] agingCounts = new int[5];
    private final String[] agingLabels = {"0-30 days", "31-60 days", "61-90 days", "91-120 days", "120+ days"};

    private double totalReceivables = 0;
    private double totalBilled = 0;
    private int totalOutstandingBills = 0;
    private int totalBills = 0;

    @Override
    public void visit(PatientRecord patient) {
        if (reportContent.length() == 0) {
            reportContent.append(repeatString("=", 100)).append("\n");
            reportContent.append("    AGED RECEIVABLES ANALYSIS REPORT\n");
            reportContent.append(repeatString("=", 100)).append("\n");
            reportContent.append("Generated: 2025-08-30 15:58:02 UTC\n");
            reportContent.append("Generated by: isharax9\n");
            reportContent.append(repeatString("=", 100)).append("\n\n");
        }
    }

    @Override
    public void visit(Appointment appointment) {
        // Not used for this report
    }

    @Override
    public void visit(MedicalBill bill) {
        totalBills++;
        totalBilled += bill.getAmount();

        double outstandingAmount = bill.getRemainingBalance();
        if (outstandingAmount > 0) {
            totalReceivables += outstandingAmount;
            totalOutstandingBills++;

            // Calculate days since billed
            LocalDate billedDate = bill.getBilledDateTime().toLocalDate();
            LocalDate currentDate = LocalDate.now();
            long daysSinceBilled = ChronoUnit.DAYS.between(billedDate, currentDate);

            // Categorize into aging buckets
            int bucketIndex = getAgingBucketIndex(daysSinceBilled);
            agingBuckets[bucketIndex] += outstandingAmount;
            agingCounts[bucketIndex]++;

            // Track patient receivables
            String patientId = bill.getPatientId();
            PatientReceivable receivable = patientReceivables.getOrDefault(patientId,
                    new PatientReceivable(patientId));
            receivable.addOutstandingBill(bill, daysSinceBilled);
            patientReceivables.put(patientId, receivable);
        }
    }

    private int getAgingBucketIndex(long days) {
        if (days <= 30) return 0;
        else if (days <= 60) return 1;
        else if (days <= 90) return 2;
        else if (days <= 120) return 3;
        else return 4;
    }

    @Override
    public String getReport() {
        generateReceivablesOverview();
        generateAgingAnalysis();
        generateDetailedAgingBreakdown();
        generatePatientReceivables();
        generateCollectionPriorities();
        generateTrendAnalysis();
        generateActionPlan();
        return reportContent.toString();
    }

    private void generateReceivablesOverview() {
        reportContent.append("💰 RECEIVABLES OVERVIEW\n");
        reportContent.append(repeatString("-", 60)).append("\n");
        reportContent.append(String.format("Total Bills Generated: %d\n", totalBills));
        reportContent.append(String.format("Bills with Outstanding Balance: %d\n", totalOutstandingBills));
        reportContent.append(String.format("Total Amount Billed: $%,.2f\n", totalBilled));
        reportContent.append(String.format("Total Accounts Receivable: $%,.2f\n", totalReceivables));

        double receivableRate = totalBilled > 0 ? (totalReceivables / totalBilled) * 100 : 0;
        double collectionRate = totalBilled > 0 ? ((totalBilled - totalReceivables) / totalBilled) * 100 : 0;

        reportContent.append(String.format("Receivables Rate: %.1f%%\n", receivableRate));
        reportContent.append(String.format("Collection Rate: %.1f%%\n", collectionRate));

        double avgReceivablePerBill = totalOutstandingBills > 0 ? totalReceivables / totalOutstandingBills : 0;
        double avgReceivablePerPatient = patientReceivables.size() > 0 ? totalReceivables / patientReceivables.size() : 0;

        reportContent.append(String.format("Average Receivable per Outstanding Bill: $%.2f\n", avgReceivablePerBill));
        reportContent.append(String.format("Average Receivable per Patient: $%.2f\n", avgReceivablePerPatient));
        reportContent.append(String.format("Patients with Outstanding Balances: %d\n", patientReceivables.size()));

        // Performance indicator
        if (receivableRate <= 10) {
            reportContent.append("Collection Performance: 🟢 Excellent\n");
        } else if (receivableRate <= 20) {
            reportContent.append("Collection Performance: 🟡 Good\n");
        } else if (receivableRate <= 35) {
            reportContent.append("Collection Performance: 🟠 Fair\n");
        } else {
            reportContent.append("Collection Performance: 🔴 Needs Immediate Attention\n");
        }
        reportContent.append("\n");
    }

    private void generateAgingAnalysis() {
        reportContent.append("📅 AGING ANALYSIS\n");
        reportContent.append(repeatString("-", 80)).append("\n");
        reportContent.append(String.format("%-12s | %-8s | %-15s | %-12s | %-15s | %-10s\n",
                "Age Range", "Count", "Amount", "Avg Amount", "% of Total", "Priority"));
        reportContent.append(repeatString("-", 80)).append("\n");

        for (int i = 0; i < agingBuckets.length; i++) {
            double percentage = totalReceivables > 0 ? (agingBuckets[i] / totalReceivables) * 100 : 0;
            double avgAmount = agingCounts[i] > 0 ? agingBuckets[i] / agingCounts[i] : 0;
            String priority = getPriorityLevel(i, percentage);

            reportContent.append(String.format("%-12s | %-8d | $%-14.2f | $%-11.2f | %13.1f%% | %-10s\n",
                    agingLabels[i], agingCounts[i], agingBuckets[i], avgAmount, percentage, priority));
        }

        reportContent.append(repeatString("-", 80)).append("\n");
        reportContent.append(String.format("%-12s | %-8d | $%-14.2f | $%-11.2f | %13.1f%% | %-10s\n",
                "TOTAL", totalOutstandingBills, totalReceivables,
                totalOutstandingBills > 0 ? totalReceivables / totalOutstandingBills : 0, 100.0, "-"));

        // Calculate weighted average days outstanding
        double weightedDaysOutstanding = calculateWeightedAverageDaysOutstanding();
        reportContent.append(String.format("\nWeighted Average Days Outstanding: %.1f days\n", weightedDaysOutstanding));
        reportContent.append("\n");
    }

    private String getPriorityLevel(int bucketIndex, double percentage) {
        switch (bucketIndex) {
            case 0: return percentage > 15 ? "LOW" : "NORMAL";
            case 1: return percentage > 10 ? "MEDIUM" : "LOW";
            case 2: return percentage > 8 ? "HIGH" : "MEDIUM";
            case 3: return percentage > 5 ? "URGENT" : "HIGH";
            case 4: return "CRITICAL";
            default: return "NORMAL";
        }
    }

    private double calculateWeightedAverageDaysOutstanding() {
        double totalWeightedDays = 0;
        double totalAmount = 0;

        // Use midpoint of each aging bucket for calculation
        double[] bucketMidpoints = {15, 45, 75, 105, 150}; // Approximate midpoints

        for (int i = 0; i < agingBuckets.length; i++) {
            totalWeightedDays += agingBuckets[i] * bucketMidpoints[i];
            totalAmount += agingBuckets[i];
        }

        return totalAmount > 0 ? totalWeightedDays / totalAmount : 0;
    }

    private void generateDetailedAgingBreakdown() {
        reportContent.append("📊 DETAILED AGING BREAKDOWN\n");
        reportContent.append(repeatString("-", 90)).append("\n");

        // Show percentage distribution with visual indicators
        reportContent.append("Aging Distribution:\n");
        for (int i = 0; i < agingBuckets.length; i++) {
            double percentage = totalReceivables > 0 ? (agingBuckets[i] / totalReceivables) * 100 : 0;
            String indicator = getVisualIndicator(i, percentage);

            reportContent.append(String.format("  %s %s: %.1f%% ($%,.2f)\n",
                    indicator, agingLabels[i], percentage, agingBuckets[i]));
        }

        // Risk assessment
        reportContent.append("\n🎯 COLLECTION RISK ASSESSMENT:\n");
        double currentRatio = totalReceivables > 0 ? (agingBuckets[0] / totalReceivables) * 100 : 0;
        double over90Days = totalReceivables > 0 ? ((agingBuckets[3] + agingBuckets[4]) / totalReceivables) * 100 : 0;

        reportContent.append(String.format("Current Receivables (0-30 days): %.1f%%\n", currentRatio));
        reportContent.append(String.format("Over 90 Days: %.1f%%\n", over90Days));

        if (over90Days > 25) {
            reportContent.append("⚠️  HIGH RISK: Significant aged receivables requiring immediate action\n");
        } else if (over90Days > 15) {
            reportContent.append("🟡 MODERATE RISK: Monitor aged receivables closely\n");
        } else if (over90Days > 5) {
            reportContent.append("🟢 LOW RISK: Acceptable aging pattern\n");
        } else {
            reportContent.append("✅ EXCELLENT: Minimal aged receivables\n");
        }

        // Days Sales Outstanding calculation
        double avgDailySales = totalBilled / 365; // Approximate annual calculation
        double dso = avgDailySales > 0 ? totalReceivables / avgDailySales : 0;
        reportContent.append(String.format("Days Sales Outstanding (DSO): %.0f days\n", dso));

        if (dso <= 30) {
            reportContent.append("DSO Performance: 🟢 Excellent\n");
        } else if (dso <= 45) {
            reportContent.append("DSO Performance: 🟡 Good\n");
        } else if (dso <= 60) {
            reportContent.append("DSO Performance: 🟠 Fair\n");
        } else {
            reportContent.append("DSO Performance: 🔴 Poor\n");
        }
        reportContent.append("\n");
    }

    private String getVisualIndicator(int bucketIndex, double percentage) {
        switch (bucketIndex) {
            case 0: return percentage > 50 ? "🟢" : "🟡";
            case 1: return percentage > 20 ? "🟡" : "🟢";
            case 2: return percentage > 15 ? "🟠" : "🟡";
            case 3: return percentage > 10 ? "🔴" : "🟠";
            case 4: return percentage > 5 ? "🚨" : "🔴";
            default: return "⚪";
        }
    }

    private void generatePatientReceivables() {
        reportContent.append("👥 PATIENT RECEIVABLES ANALYSIS\n");
        reportContent.append(repeatString("-", 100)).append("\n");
        reportContent.append(String.format("%-15s | %-8s | %-15s | %-12s | %-15s | %-12s | %-15s\n",
                "Patient ID", "Bills", "Total Due", "Avg Age", "Oldest Bill", "Priority", "Contact Status"));
        reportContent.append(repeatString("-", 100)).append("\n");

        // Sort patients by total outstanding amount (highest first)
        patientReceivables.values().stream()
                .sorted((p1, p2) -> Double.compare(p2.getTotalOutstanding(), p1.getTotalOutstanding()))
                .limit(20) // Show top 20 patients
                .forEach(patient -> {
                    String priority = patient.getPriorityLevel();
                    String contactStatus = patient.suggestContactAction();

                    reportContent.append(String.format("%-15s | %-8d | $%-14.2f | %10.1f | %13d | %-12s | %-15s\n",
                            patient.getPatientId(),
                            patient.getOutstandingBillCount(),
                            patient.getTotalOutstanding(),
                            patient.getAverageAge(),
                            patient.getOldestBillAge(),
                            priority,
                            contactStatus));
                });

        // Summary statistics
        reportContent.append("\n📊 PATIENT RECEIVABLES STATISTICS:\n");

        long highPriorityPatients = patientReceivables.values().stream()
                .filter(p -> "HIGH".equals(p.getPriorityLevel()) || "CRITICAL".equals(p.getPriorityLevel()))
                .count();

        double avgOutstandingPerPatient = patientReceivables.values().stream()
                .mapToDouble(PatientReceivable::getTotalOutstanding)
                .average().orElse(0);

        Optional<PatientReceivable> largestReceivable = patientReceivables.values().stream()
                .max(Comparator.comparing(PatientReceivable::getTotalOutstanding));

        reportContent.append(String.format("High Priority Patients: %d\n", highPriorityPatients));
        reportContent.append(String.format("Average Outstanding per Patient: $%.2f\n", avgOutstandingPerPatient));

        if (largestReceivable.isPresent()) {
            PatientReceivable largest = largestReceivable.get();
            reportContent.append(String.format("Largest Receivable: %s ($%.2f)\n",
                    largest.getPatientId(), largest.getTotalOutstanding()));
        }
        reportContent.append("\n");
    }

    private void generateCollectionPriorities() {
        reportContent.append("🎯 COLLECTION PRIORITIES\n");
        reportContent.append(repeatString("-", 80)).append("\n");

        // Critical accounts (120+ days)
        reportContent.append("🚨 CRITICAL - IMMEDIATE ACTION REQUIRED:\n");
        patientReceivables.values().stream()
                .filter(p -> "CRITICAL".equals(p.getPriorityLevel()))
                .sorted((p1, p2) -> Double.compare(p2.getTotalOutstanding(), p1.getTotalOutstanding()))
                .limit(10)
                .forEach(patient -> {
                    reportContent.append(String.format("  Patient %s: $%.2f (%d days oldest)\n",
                            patient.getPatientId(), patient.getTotalOutstanding(), patient.getOldestBillAge()));
                });

        // High priority accounts (91-120 days)
        reportContent.append("\n🔴 HIGH PRIORITY - URGENT FOLLOW-UP:\n");
        patientReceivables.values().stream()
                .filter(p -> "HIGH".equals(p.getPriorityLevel()))
                .sorted((p1, p2) -> Double.compare(p2.getTotalOutstanding(), p1.getTotalOutstanding()))
                .limit(10)
                .forEach(patient -> {
                    reportContent.append(String.format("  Patient %s: $%.2f (%d days oldest)\n",
                            patient.getPatientId(), patient.getTotalOutstanding(), patient.getOldestBillAge()));
                });

        // Medium priority accounts (61-90 days)
        reportContent.append("\n🟠 MEDIUM PRIORITY - SCHEDULED FOLLOW-UP:\n");
        patientReceivables.values().stream()
                .filter(p -> "MEDIUM".equals(p.getPriorityLevel()))
                .sorted((p1, p2) -> Double.compare(p2.getTotalOutstanding(), p1.getTotalOutstanding()))
                .limit(5)
                .forEach(patient -> {
                    reportContent.append(String.format("  Patient %s: $%.2f (%d days oldest)\n",
                            patient.getPatientId(), patient.getTotalOutstanding(), patient.getOldestBillAge()));
                });

        // Collection workload summary
        reportContent.append("\n📋 COLLECTION WORKLOAD SUMMARY:\n");
        Map<String, Long> priorityCounts = new HashMap<>();
        Map<String, Double> priorityAmounts = new HashMap<>();

        patientReceivables.values().forEach(patient -> {
            String priority = patient.getPriorityLevel();
            priorityCounts.put(priority, priorityCounts.getOrDefault(priority, 0L) + 1);
            priorityAmounts.put(priority, priorityAmounts.getOrDefault(priority, 0.0) + patient.getTotalOutstanding());
        });

        priorityCounts.forEach((priority, count) -> {
            double amount = priorityAmounts.get(priority);
            reportContent.append(String.format("  %s Priority: %d patients, $%.2f total\n", priority, count, amount));
        });
        reportContent.append("\n");
    }

    private void generateTrendAnalysis() {
        reportContent.append("📈 AGING TREND ANALYSIS\n");
        reportContent.append(repeatString("-", 60)).append("\n");

        // Analyze aging pattern
        double currentPercentage = totalReceivables > 0 ? (agingBuckets[0] / totalReceivables) * 100 : 0;
        double over60Days = totalReceivables > 0 ? ((agingBuckets[2] + agingBuckets[3] + agingBuckets[4]) / totalReceivables) * 100 : 0;

        reportContent.append("Aging Pattern Analysis:\n");
        reportContent.append(String.format("Current (0-30 days): %.1f%%\n", currentPercentage));
        reportContent.append(String.format("Over 60 days: %.1f%%\n", over60Days));

        // Trend indicators
        if (currentPercentage > 60) {
            reportContent.append("📈 Trend: Healthy - Most receivables are current\n");
        } else if (currentPercentage > 40) {
            reportContent.append("📊 Trend: Moderate - Monitor aging progression\n");
        } else {
            reportContent.append("📉 Trend: Concerning - High proportion of aged receivables\n");
        }

        // Collection velocity analysis
        double collectionVelocity = totalBills > 0 ? ((double) (totalBills - totalOutstandingBills) / totalBills) * 100 : 0;
        reportContent.append(String.format("Collection Velocity: %.1f%% (bills collected vs generated)\n", collectionVelocity));

        // Seasonal considerations
        reportContent.append("\n🌟 SEASONAL CONSIDERATIONS:\n");
        reportContent.append("  • Consider seasonal payment patterns\n");
        reportContent.append("  • Holiday periods may affect collection timing\n");
        reportContent.append("  • Insurance payment cycles impact cash flow\n");
        reportContent.append("\n");
    }

    private void generateActionPlan() {
        reportContent.append("📋 COLLECTION ACTION PLAN\n");
        reportContent.append(repeatString("-", 60)).append("\n");

        // Immediate actions
        reportContent.append("🚨 IMMEDIATE ACTIONS (Next 7 Days):\n");

        long criticalCount = patientReceivables.values().stream()
                .filter(p -> "CRITICAL".equals(p.getPriorityLevel()))
                .count();

        long highCount = patientReceivables.values().stream()
                .filter(p -> "HIGH".equals(p.getPriorityLevel()))
                .count();

        if (criticalCount > 0) {
            reportContent.append(String.format("  • Contact %d critical accounts (120+ days)\n", criticalCount));
            reportContent.append("  • Consider collection agency referral for non-responsive accounts\n");
        }

        if (highCount > 0) {
            reportContent.append(String.format("  • Phone calls to %d high priority accounts (91-120 days)\n", highCount));
        }

        if (agingBuckets[4] > 1000) {
            reportContent.append(String.format("  • Review write-off policy for $%.2f in 120+ day receivables\n", agingBuckets[4]));
        }

        // Weekly actions
        reportContent.append("\n📅 WEEKLY ACTIONS:\n");
        reportContent.append("  • Send automated payment reminders for 31-60 day accounts\n");
        reportContent.append("  • Review and update patient contact information\n");
        reportContent.append("  • Analyze payment patterns by service type\n");
        reportContent.append("  • Follow up on insurance claims in 61-90 day range\n");

        // Monthly actions
        reportContent.append("\n📊 MONTHLY ACTIONS:\n");
        reportContent.append("  • Generate aging reports and trend analysis\n");
        reportContent.append("  • Review collection staff performance\n");
        reportContent.append("  • Update collection procedures based on aging patterns\n");
        reportContent.append("  • Negotiate payment plans for large balances\n");

        // Process improvements
        reportContent.append("\n⚙️ PROCESS IMPROVEMENTS:\n");

        double over90Percentage = totalReceivables > 0 ? ((agingBuckets[3] + agingBuckets[4]) / totalReceivables) * 100 : 0;

        if (over90Percentage > 20) {
            reportContent.append("  • Implement more aggressive early collection procedures\n");
            reportContent.append("  • Review credit policies and patient screening\n");
        }

        reportContent.append("  • Enhance patient financial counseling at point of service\n");
        reportContent.append("  • Implement automated payment reminder systems\n");
        reportContent.append("  • Offer multiple payment options and payment plans\n");
        reportContent.append("  • Train staff on effective collection communication\n");

        // Performance targets
        reportContent.append("\n🎯 PERFORMANCE TARGETS:\n");
        reportContent.append("  • Maintain <15% of receivables over 90 days\n");
        reportContent.append("  • Achieve <45 days average DSO\n");
        reportContent.append("  • Contact all accounts within 35 days of billing\n");
        reportContent.append("  • Reduce total receivables by 10% within 90 days\n");

        reportContent.append("\n");
        reportContent.append(repeatString("=", 100)).append("\n");
        reportContent.append("End of Aged Receivables Analysis Report\n");
        reportContent.append(repeatString("=", 100)).append("\n");
    }

    private String repeatString(String str, int count) {
        return str.repeat(count);
    }

    // PatientReceivable helper class
    private static class PatientReceivable {
        private final String patientId;
        private double totalOutstanding = 0;
        private int outstandingBillCount = 0;
        private long oldestBillAge = 0;
        private double totalAge = 0; // For calculating average age

        public PatientReceivable(String patientId) {
            this.patientId = patientId;
        }

        public void addOutstandingBill(MedicalBill bill, long daysSinceBilled) {
            outstandingBillCount++;
            totalOutstanding += bill.getRemainingBalance();
            totalAge += daysSinceBilled;

            if (daysSinceBilled > oldestBillAge) {
                oldestBillAge = daysSinceBilled;
            }
        }

        public String getPatientId() { return patientId; }
        public double getTotalOutstanding() { return totalOutstanding; }
        public int getOutstandingBillCount() { return outstandingBillCount; }
        public long getOldestBillAge() { return oldestBillAge; }

        public double getAverageAge() {
            return outstandingBillCount > 0 ? totalAge / outstandingBillCount : 0;
        }

        public String getPriorityLevel() {
            if (oldestBillAge > 120) return "CRITICAL";
            else if (oldestBillAge > 90) return "HIGH";
            else if (oldestBillAge > 60) return "MEDIUM";
            else if (oldestBillAge > 30) return "LOW";
            else return "NORMAL";
        }

        public String suggestContactAction() {
            if (oldestBillAge > 120) return "Collection Agency";
            else if (oldestBillAge > 90) return "Phone Call";
            else if (oldestBillAge > 60) return "Email Reminder";
            else if (oldestBillAge > 30) return "Statement";
            else return "Monitor";
        }
    }
}