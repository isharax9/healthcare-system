package com.globemed.reports;

import com.globemed.appointment.Appointment;
import com.globemed.billing.MedicalBill;
import com.globemed.patient.PatientRecord;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Patient Summary Report Visitor - Fixed to match actual database schema
 * Provides comprehensive overview of patient's healthcare and financial information
 */
public class PatientSummaryReportVisitor implements ReportVisitor {
    private final StringBuilder reportContent = new StringBuilder();
    private final List<Appointment> appointments = new ArrayList<>();
    private final List<MedicalBill> bills = new ArrayList<>();
    private final Map<String, Integer> serviceCount = new HashMap<>();
    private final Map<String, Integer> doctorVisits = new HashMap<>();
    private final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    private PatientRecord currentPatient;
    private double totalBilled = 0;
    private double totalCollected = 0;
    private double totalOutstanding = 0;

    @Override
    public void visit(PatientRecord patient) {
        this.currentPatient = patient;

        reportContent.append(repeatString("=", 90)).append("\n");
        reportContent.append("    COMPREHENSIVE PATIENT SUMMARY REPORT\n");
        reportContent.append(repeatString("=", 90)).append("\n");
        reportContent.append("Patient: ").append(patient.getName())
                .append(" (ID: ").append(patient.getPatientId()).append(")\n");
        reportContent.append("Generated: 2025-08-30 15:39:27 UTC\n");
        reportContent.append("Generated by: isharax9\n");
        reportContent.append(repeatString("=", 90)).append("\n\n");
    }

    @Override
    public void visit(Appointment appointment) {
        appointments.add(appointment);

        // Track doctor visits
        String doctorId = appointment.getDoctorId();
        doctorVisits.put(doctorId, doctorVisits.getOrDefault(doctorId, 0) + 1);
    }

    @Override
    public void visit(MedicalBill bill) {
        bills.add(bill);
        totalBilled += bill.getAmount();
        totalCollected += bill.getTotalCollected();
        totalOutstanding += bill.getRemainingBalance();

        // Track service usage
        String service = bill.getServiceDescription();
        serviceCount.put(service, serviceCount.getOrDefault(service, 0) + 1);
    }

    @Override
    public String getReport() {
        generatePatientInformation();
        generateHealthcareSummary();
        generateFinancialSummary();
        generateRecentActivity();
        generateServiceUtilization();
        generateDoctorRelationships();
        generateHealthIndicators();
        generateActionItems();
        return reportContent.toString();
    }

    private void generatePatientInformation() {
        reportContent.append("👤 PATIENT INFORMATION\n");
        reportContent.append(repeatString("-", 60)).append("\n");
        reportContent.append(String.format("Patient Name: %s\n", currentPatient.getName()));
        reportContent.append(String.format("Patient ID: %s\n", currentPatient.getPatientId()));

        // Medical history if available
        if (currentPatient.getMedicalHistory() != null && !currentPatient.getMedicalHistory().trim().isEmpty()) {
            reportContent.append(String.format("Medical History: %s\n",
                    truncateString(currentPatient.getMedicalHistory(), 100)));
        }

        // Treatment plans if available
        if (currentPatient.getTreatmentPlans() != null && !currentPatient.getTreatmentPlans().trim().isEmpty()) {
            reportContent.append(String.format("Treatment Plans: %s\n",
                    truncateString(currentPatient.getTreatmentPlans(), 100)));
        }

        reportContent.append(String.format("Report Date: %s\n", LocalDate.now().format(dateFormatter)));
        reportContent.append("\n");
    }

    private void generateHealthcareSummary() {
        reportContent.append("🏥 HEALTHCARE SUMMARY\n");
        reportContent.append(repeatString("-", 60)).append("\n");
        reportContent.append(String.format("Total Appointments: %d\n", appointments.size()));
        reportContent.append(String.format("Total Medical Bills: %d\n", bills.size()));
        reportContent.append(String.format("Unique Services Used: %d\n", serviceCount.size()));
        reportContent.append(String.format("Doctors Consulted: %d\n", doctorVisits.size()));

        // Healthcare engagement period
        if (!appointments.isEmpty()) {
            LocalDate firstAppointment = appointments.stream()
                    .min(Comparator.comparing(Appointment::getAppointmentDateTime))
                    .map(apt -> apt.getAppointmentDateTime().toLocalDate())
                    .orElse(LocalDate.now());

            LocalDate lastAppointment = appointments.stream()
                    .max(Comparator.comparing(Appointment::getAppointmentDateTime))
                    .map(apt -> apt.getAppointmentDateTime().toLocalDate())
                    .orElse(LocalDate.now());

            reportContent.append(String.format("Care Period: %s to %s\n", firstAppointment, lastAppointment));

            long daysBetween = java.time.temporal.ChronoUnit.DAYS.between(firstAppointment, LocalDate.now());
            if (daysBetween > 0) {
                double appointmentsPerMonth = (appointments.size() * 30.0) / daysBetween;
                reportContent.append(String.format("Appointment Frequency: %.1f per month\n", appointmentsPerMonth));
            }
        }

        // Healthcare utilization level
        if (appointments.size() > 20) {
            reportContent.append("Healthcare Engagement: 🔴 High utilization\n");
        } else if (appointments.size() > 10) {
            reportContent.append("Healthcare Engagement: 🟡 Regular patient\n");
        } else if (appointments.size() > 3) {
            reportContent.append("Healthcare Engagement: 🟢 Moderate usage\n");
        } else {
            reportContent.append("Healthcare Engagement: ⚪ Limited interaction\n");
        }
        reportContent.append("\n");
    }

    private void generateFinancialSummary() {
        reportContent.append("💰 FINANCIAL SUMMARY\n");
        reportContent.append(repeatString("-", 60)).append("\n");
        reportContent.append(String.format("Total Billed: $%,.2f\n", totalBilled));
        reportContent.append(String.format("Total Collected: $%,.2f\n", totalCollected));
        reportContent.append(String.format("Total Outstanding: $%,.2f\n", totalOutstanding));

        double collectionRate = totalBilled > 0 ? (totalCollected / totalBilled) * 100 : 0;
        double outstandingRate = totalBilled > 0 ? (totalOutstanding / totalBilled) * 100 : 0;

        reportContent.append(String.format("Collection Rate: %.1f%%\n", collectionRate));
        reportContent.append(String.format("Outstanding Rate: %.1f%%\n", outstandingRate));

        // Payment breakdown
        double totalPatientPaid = bills.stream().mapToDouble(MedicalBill::getAmountPaid).sum();
        double totalInsurancePaid = bills.stream().mapToDouble(MedicalBill::getInsurancePaidAmount).sum();

        if (totalCollected > 0) {
            double patientPercentage = (totalPatientPaid / totalCollected) * 100;
            double insurancePercentage = (totalInsurancePaid / totalCollected) * 100;
            reportContent.append(String.format("Patient Payments: $%,.2f (%.1f%%)\n", totalPatientPaid, patientPercentage));
            reportContent.append(String.format("Insurance Payments: $%,.2f (%.1f%%)\n", totalInsurancePaid, insurancePercentage));
        }

        // Financial status
        if (outstandingRate > 30) {
            reportContent.append("Payment Status: 🔴 Significant outstanding balance\n");
        } else if (outstandingRate > 10) {
            reportContent.append("Payment Status: 🟡 Moderate outstanding balance\n");
        } else if (outstandingRate > 0) {
            reportContent.append("Payment Status: 🟢 Small outstanding balance\n");
        } else {
            reportContent.append("Payment Status: ✅ All bills paid\n");
        }

        // Average costs
        double avgBillAmount = bills.size() > 0 ? totalBilled / bills.size() : 0;
        double avgAppointmentCost = appointments.size() > 0 ? totalBilled / appointments.size() : 0;

        reportContent.append(String.format("Average Bill Amount: $%.2f\n", avgBillAmount));
        reportContent.append(String.format("Average Appointment Cost: $%.2f\n", avgAppointmentCost));
        reportContent.append("\n");
    }

    private void generateRecentActivity() {
        reportContent.append("📅 RECENT ACTIVITY\n");
        reportContent.append(repeatString("-", 80)).append("\n");

        // Recent appointments
        reportContent.append("Recent Appointments:\n");
        appointments.stream()
                .sorted((a1, a2) -> a2.getAppointmentDateTime().compareTo(a1.getAppointmentDateTime()))
                .limit(5)
                .forEach(apt -> {
                    reportContent.append(String.format("  %s - Dr. %s (%s) - %s\n",
                            apt.getAppointmentDateTime().toLocalDate(),
                            apt.getDoctorId(),
                            apt.getStatus(),
                            apt.getReason() != null ? truncateString(apt.getReason(), 40) : "No reason specified"));
                });

        // Recent bills
        reportContent.append("\nRecent Bills:\n");
        bills.stream()
                .sorted((b1, b2) -> b2.getBilledDateTime().compareTo(b1.getBilledDateTime()))
                .limit(5)
                .forEach(bill -> {
                    reportContent.append(String.format("  %s - %s: $%.2f (%s)\n",
                            bill.getBilledDateTime().toLocalDate(),
                            truncateString(bill.getServiceDescription(), 30),
                            bill.getAmount(),
                            bill.getStatus()));
                });

        // Last activity
        if (!appointments.isEmpty()) {
            LocalDate lastAppointment = appointments.stream()
                    .max(Comparator.comparing(Appointment::getAppointmentDateTime))
                    .map(apt -> apt.getAppointmentDateTime().toLocalDate())
                    .orElse(null);

            if (lastAppointment != null) {
                long daysSinceLastVisit = java.time.temporal.ChronoUnit.DAYS.between(lastAppointment, LocalDate.now());
                reportContent.append(String.format("\nLast Healthcare Activity: %d days ago\n", daysSinceLastVisit));
            }
        }
        reportContent.append("\n");
    }

    private void generateServiceUtilization() {
        reportContent.append("📊 SERVICE UTILIZATION\n");
        reportContent.append(repeatString("-", 70)).append("\n");
        reportContent.append(String.format("%-40s | %-8s | %-15s\n", "Service", "Count", "% of Total"));
        reportContent.append(repeatString("-", 70)).append("\n");

        serviceCount.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .forEach(entry -> {
                    double percentage = bills.size() > 0 ? (double) entry.getValue() / bills.size() * 100 : 0;
                    reportContent.append(String.format("%-40s | %-8d | %13.1f%%\n",
                            truncateString(entry.getKey(), 40), entry.getValue(), percentage));
                });

        // Most frequent service
        serviceCount.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .ifPresent(entry -> {
                    reportContent.append(String.format("\nMost Frequent Service: %s (%d times)\n",
                            entry.getKey(), entry.getValue()));
                });
        reportContent.append("\n");
    }

    private void generateDoctorRelationships() {
        reportContent.append("👨‍⚕️ DOCTOR RELATIONSHIPS\n");
        reportContent.append(repeatString("-", 60)).append("\n");
        reportContent.append(String.format("%-20s | %-12s | %-20s\n", "Doctor ID", "Visits", "Last Visit"));
        reportContent.append(repeatString("-", 60)).append("\n");

        doctorVisits.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .forEach(entry -> {
                    String doctorId = entry.getKey();
                    int visitCount = entry.getValue();

                    // Find last visit to this doctor
                    String lastVisit = appointments.stream()
                            .filter(apt -> apt.getDoctorId().equals(doctorId))
                            .max(Comparator.comparing(Appointment::getAppointmentDateTime))
                            .map(apt -> apt.getAppointmentDateTime().toLocalDate().toString())
                            .orElse("N/A");

                    reportContent.append(String.format("%-20s | %-12d | %-20s\n",
                            doctorId, visitCount, lastVisit));
                });

        // Primary care relationship
        doctorVisits.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .ifPresent(entry -> {
                    reportContent.append(String.format("\nPrimary Doctor: Dr. %s (%d visits)\n",
                            entry.getKey(), entry.getValue()));
                });
        reportContent.append("\n");
    }

    private void generateHealthIndicators() {
        reportContent.append("🏃 HEALTH INDICATORS\n");
        reportContent.append(repeatString("-", 60)).append("\n");

        // Care continuity
        if (doctorVisits.size() == 1) {
            reportContent.append("Care Continuity: 🟢 Single provider relationship\n");
        } else if (doctorVisits.size() <= 3) {
            reportContent.append("Care Continuity: 🟡 Multiple coordinated providers\n");
        } else {
            reportContent.append("Care Continuity: 🔴 Many providers - consider coordination\n");
        }

        // Service diversity
        if (serviceCount.size() > 10) {
            reportContent.append("Service Diversity: 🔴 High - comprehensive care needs\n");
        } else if (serviceCount.size() > 5) {
            reportContent.append("Service Diversity: 🟡 Moderate - varied healthcare needs\n");
        } else {
            reportContent.append("Service Diversity: 🟢 Focused - specific healthcare needs\n");
        }

        // Appointment compliance
        long completedAppointments = appointments.stream()
                .filter(apt -> "Completed".equalsIgnoreCase(apt.getStatus()) || "Scheduled".equalsIgnoreCase(apt.getStatus()))
                .count();

        if (appointments.size() > 0) {
            double complianceRate = (double) completedAppointments / appointments.size() * 100;
            reportContent.append(String.format("Appointment Compliance: %.1f%%", complianceRate));

            if (complianceRate >= 90) {
                reportContent.append(" 🟢 Excellent\n");
            } else if (complianceRate >= 75) {
                reportContent.append(" 🟡 Good\n");
            } else {
                reportContent.append(" 🔴 Needs improvement\n");
            }
        }

        // Payment responsibility
        double paymentResponsibility = totalBilled > 0 ? (totalCollected / totalBilled) * 100 : 0;
        reportContent.append(String.format("Payment Responsibility: %.1f%%", paymentResponsibility));

        if (paymentResponsibility >= 95) {
            reportContent.append(" 🟢 Excellent\n");
        } else if (paymentResponsibility >= 80) {
            reportContent.append(" 🟡 Good\n");
        } else {
            reportContent.append(" 🔴 Needs attention\n");
        }
        reportContent.append("\n");
    }

    private void generateActionItems() {
        reportContent.append("📋 ACTION ITEMS & RECOMMENDATIONS\n");
        reportContent.append(repeatString("-", 60)).append("\n");

        List<String> actionItems = new ArrayList<>();

        // Financial action items
        if (totalOutstanding > 1000) {
            actionItems.add("💰 Address significant outstanding balance ($" + String.format("%.2f", totalOutstanding) + ")");
        } else if (totalOutstanding > 100) {
            actionItems.add("💳 Follow up on outstanding balance ($" + String.format("%.2f", totalOutstanding) + ")");
        }

        // Healthcare action items
        if (appointments.isEmpty()) {
            actionItems.add("🏥 Schedule initial consultation");
        } else {
            LocalDate lastAppointment = appointments.stream()
                    .max(Comparator.comparing(Appointment::getAppointmentDateTime))
                    .map(apt -> apt.getAppointmentDateTime().toLocalDate())
                    .orElse(LocalDate.now());

            long daysSinceLastVisit = java.time.temporal.ChronoUnit.DAYS.between(lastAppointment, LocalDate.now());
            if (daysSinceLastVisit > 365) {
                actionItems.add("📅 Schedule annual check-up (last visit " + daysSinceLastVisit + " days ago)");
            } else if (daysSinceLastVisit > 180) {
                actionItems.add("📅 Consider routine follow-up appointment");
            }
        }

        // Care coordination
        if (doctorVisits.size() > 4) {
            actionItems.add("🤝 Consider care coordination between multiple providers");
        }

        // Service utilization
        if (serviceCount.size() > 8) {
            actionItems.add("📊 Review service utilization for optimization opportunities");
        }

        // Payment patterns
        double outstandingRate = totalBilled > 0 ? (totalOutstanding / totalBilled) * 100 : 0;
        if (outstandingRate > 25) {
            actionItems.add("💼 Discuss payment plan options");
        }

        if (actionItems.isEmpty()) {
            reportContent.append("✅ No immediate action items - patient in good standing\n");
        } else {
            actionItems.forEach(item -> reportContent.append("  " + item + "\n"));
        }

        reportContent.append("\n📞 NEXT STEPS:\n");
        reportContent.append("  • Review with patient care team\n");
        reportContent.append("  • Update patient care plan as needed\n");
        reportContent.append("  • Schedule follow-up if indicated\n");
        reportContent.append("  • Address any outstanding financial items\n");

        reportContent.append("\n");
        reportContent.append(repeatString("=", 90)).append("\n");
        reportContent.append("End of Comprehensive Patient Summary Report\n");
        reportContent.append(repeatString("=", 90)).append("\n");
    }

    private String repeatString(String str, int count) {
        return str.repeat(count);
    }

    private String truncateString(String str, int maxLength) {
        if (str.length() <= maxLength) return str;
        return str.substring(0, maxLength - 3) + "...";
    }
}