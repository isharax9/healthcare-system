name: Cross-Platform Build

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository
  # Database configuration for testing and validation
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Run tests
      run: mvn clean test
      env:
        DB_URL: ${{ env.DB_URL }}
        DB_USERNAME: ${{ env.DB_USERNAME }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build JAR
      run: mvn clean package -DskipTests
      env:
        DB_URL: ${{ env.DB_URL }}
        DB_USERNAME: ${{ env.DB_USERNAME }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
      
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: healthcare-system-jar
        path: target/*.jar

  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: build-jar
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build application
      run: mvn clean package -DskipTests
      env:
        DB_URL: ${{ env.DB_URL }}
        DB_USERNAME: ${{ env.DB_USERNAME }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
      
    - name: Create Windows installer with jpackage
      run: |
        jpackage --input target `
                 --name "GlobeMed Healthcare System" `
                 --main-jar healthcare-system-1.0.0-executable.jar `
                 --main-class com.globemed.Main `
                 --type exe `
                 --dest dist `
                 --app-version "1.0.0" `
                 --vendor "GlobeMed Healthcare Solutions" `
                 --description "Healthcare Management System" `
                 --win-console `
                 --win-dir-chooser `
                 --win-menu `
                 --win-shortcut
      
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: healthcare-system-windows
        path: dist/*.exe

  build-macos:
    name: Build macOS Application
    runs-on: macos-latest
    needs: build-jar
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build application
      run: mvn clean package -DskipTests
      env:
        DB_URL: ${{ env.DB_URL }}
        DB_USERNAME: ${{ env.DB_USERNAME }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
      
    - name: Create macOS app bundle with jpackage
      run: |
        jpackage --input target \
                 --name "GlobeMed Healthcare System" \
                 --main-jar healthcare-system-1.0.0-executable.jar \
                 --main-class com.globemed.Main \
                 --type app-image \
                 --dest dist \
                 --app-version "1.0.0" \
                 --vendor "GlobeMed Healthcare Solutions" \
                 --description "Healthcare Management System"
      
    - name: Create DMG installer
      run: |
        jpackage --input target \
                 --name "GlobeMed Healthcare System" \
                 --main-jar healthcare-system-1.0.0-executable.jar \
                 --main-class com.globemed.Main \
                 --type dmg \
                 --dest dist \
                 --app-version "1.0.0" \
                 --vendor "GlobeMed Healthcare Solutions" \
                 --description "Healthcare Management System"
      
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: healthcare-system-macos
        path: |
          dist/*.app
          dist/*.dmg

  build-linux:
    name: Build Linux Application
    runs-on: ubuntu-latest
    needs: build-jar
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build application
      run: mvn clean package -DskipTests
      env:
        DB_URL: ${{ env.DB_URL }}
        DB_USERNAME: ${{ env.DB_USERNAME }}
        DB_PASSWORD: ${{ env.DB_PASSWORD }}
      
    - name: Create Linux app image with jpackage
      run: |
        jpackage --input target \
                 --name "globemed-healthcare-system" \
                 --main-jar healthcare-system-1.0.0-executable.jar \
                 --main-class com.globemed.Main \
                 --type app-image \
                 --dest dist \
                 --app-version "1.0.0" \
                 --vendor "GlobeMed Healthcare Solutions" \
                 --description "Healthcare Management System"
      
    - name: Create DEB package
      run: |
        jpackage --input target \
                 --name "globemed-healthcare-system" \
                 --main-jar healthcare-system-1.0.0-executable.jar \
                 --main-class com.globemed.Main \
                 --type deb \
                 --dest dist \
                 --app-version "1.0.0" \
                 --vendor "GlobeMed Healthcare Solutions" \
                 --description "Healthcare Management System" \
                 --linux-menu-group "Office" \
                 --linux-shortcut
      
    - name: Create RPM package
      run: |
        jpackage --input target \
                 --name "globemed-healthcare-system" \
                 --main-jar healthcare-system-1.0.0-executable.jar \
                 --main-class com.globemed.Main \
                 --type rpm \
                 --dest dist \
                 --app-version "1.0.0" \
                 --vendor "GlobeMed Healthcare Solutions" \
                 --description "Healthcare Management System" \
                 --linux-menu-group "Office" \
                 --linux-shortcut
      
    - name: Create portable executable scripts
      run: |
        mkdir -p dist/portable
        cp target/healthcare-system-1.0.0-executable.jar dist/portable/
        
        # Create launch script for Linux
        cat > dist/portable/run-globemed.sh << 'EOF'
        #!/bin/bash
        SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
        java -jar "$SCRIPT_DIR/healthcare-system-1.0.0-executable.jar" "$@"
        EOF
        chmod +x dist/portable/run-globemed.sh
        
        # Create launch script for Windows (when running on Linux)
        cat > dist/portable/run-globemed.bat << 'EOF'
        @echo off
        set SCRIPT_DIR=%~dp0
        java -jar "%SCRIPT_DIR%healthcare-system-1.0.0-executable.jar" %*
        EOF
      
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: healthcare-system-linux
        path: |
          dist/*.deb
          dist/*.rpm
          dist/globemed-healthcare-system
          dist/portable/*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          healthcare-system-windows/*.exe
          healthcare-system-macos/*.dmg
          healthcare-system-linux/*.deb
          healthcare-system-linux/*.rpm
          healthcare-system-linux/portable/*
          healthcare-system-jar/*.jar
        body: |
          ## Cross-Platform Release
          
          This release includes executables for all major platforms:
          
          ### Windows
          - `.exe` installer with automatic setup
          
          ### macOS
          - `.dmg` installer for easy installation
          
          ### Linux
          - `.deb` package for Debian/Ubuntu systems
          - `.rpm` package for Red Hat/CentOS/Fedora systems
          - Portable executable with shell scripts
          
          ### Universal
          - Executable JAR file (requires Java 17+)
          
          ## Database Configuration
          
          All builds support environment variable configuration:
          - `DB_URL`: Database connection URL
          - `DB_USERNAME`: Database username  
          - `DB_PASSWORD`: Database password
          
          See the documentation for setup instructions.
        prerelease: false
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
